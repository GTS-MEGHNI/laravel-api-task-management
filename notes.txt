====================================================
üß± TASK MANAGEMENT API PROJECT - NOTES
====================================================

This document summarizes the architecture, requirements, models,
relationships, and API endpoints for the Task Management API project
built using the Laravel API Starter Kit.

----------------------------------------------------
1Ô∏è‚É£ PROJECT OVERVIEW
----------------------------------------------------
Goal:
    Build a modular and scalable Task Management REST API.
    Users can create teams, manage projects, assign tasks,
    add comments, and track progress with notifications and
    activity logs.

Tech Stack:
    - Laravel 12.33 (API mode)
    - PHP 8.4
    - MySQL
    - JSON API responses (standardized via ApiResponse class)
    - Versioned API routes (v1)

Design Patterns:
    - Repository pattern (data layer)
    - Service layer (business logic)
    - Observer pattern (model lifecycle)
    - Event / Listener pattern (domain events)
    - Notification system (database + optional mail)

----------------------------------------------------
2Ô∏è‚É£ MODELS & SCHEMA
----------------------------------------------------

üßç‚Äç‚ôÇÔ∏è User
----------------------------------------------------
- id (uuid, pk)
- name (string)
- email (string, unique)
- password (string)
- avatar (string, nullable)
- email_verified_at (timestamp, nullable)
- created_at / updated_at

Relationships:
- hasMany(Project)
- hasMany(Task, as assignee)
- belongsToMany(Team)
- hasMany(Comment)
- hasMany(ActivityLog, as causer)

----------------------------------------------------
üë• Team
----------------------------------------------------
- id (uuid, pk)
- name (string)
- owner_id (uuid, FK users.id)
- created_at / updated_at

Pivot: team_user
- team_id (uuid)
- user_id (uuid)
- role (string)
- timestamps

Relationships:
- belongsTo(User, owner)
- belongsToMany(User)
- hasMany(Project)

----------------------------------------------------
üìÅ Project
----------------------------------------------------
- id (uuid, pk)
- team_id (uuid, FK teams.id, nullable)
- owner_id (uuid, FK users.id)
- name (string)
- slug (string, unique)
- description (text, nullable)
- status (enum: active, archived)
- starts_at (date, nullable)
- ends_at (date, nullable)
- created_at / updated_at

Relationships:
- belongsTo(User, owner)
- belongsTo(Team)
- hasMany(Task)
- morphMany(ActivityLog, subject)

----------------------------------------------------
‚úÖ Task
----------------------------------------------------
- id (uuid, pk)
- project_id (uuid, FK projects.id)
- assignee_id (uuid, FK users.id, nullable)
- title (string)
- description (text, nullable)
- status (enum: pending, in_progress, completed)
- priority (enum: low, medium, high)
- due_date (date, nullable)
- completed_at (timestamp, nullable)
- created_at / updated_at

Relationships:
- belongsTo(Project)
- belongsTo(User, assignee)
- hasMany(Comment)
- morphMany(ActivityLog, subject)

----------------------------------------------------
üí¨ Comment
----------------------------------------------------
- id (uuid, pk)
- task_id (uuid, FK tasks.id)
- user_id (uuid, FK users.id)
- body (text)
- created_at / updated_at

Relationships:
- belongsTo(Task)
- belongsTo(User)

----------------------------------------------------
üßæ ActivityLog
----------------------------------------------------
- id (uuid, pk)
- causer_id (uuid, FK users.id, nullable)
- subject_id (uuid)
- subject_type (string)
- action (string)
- properties (json)
- created_at / updated_at

Relationships:
- morphTo(subject)
- belongsTo(User, causer)

----------------------------------------------------
3Ô∏è‚É£ CORE RELATIONSHIPS SUMMARY
----------------------------------------------------
User ‚Üí hasMany ‚Üí Project
User ‚Üí hasMany ‚Üí Task (as assignee)
User ‚Üí belongsToMany ‚Üí Team
Team ‚Üí hasMany ‚Üí Project
Project ‚Üí hasMany ‚Üí Task
Task ‚Üí hasMany ‚Üí Comment
Task, Project ‚Üí morphMany ‚Üí ActivityLog
User ‚Üí hasMany ‚Üí ActivityLog (as causer)

----------------------------------------------------
4Ô∏è‚É£ ROUTES (API V1)
----------------------------------------------------
Base Prefix: /api/v1

AUTH
----------------------------------------------------
POST   /auth/register        ‚Üí register new user
POST   /auth/login           ‚Üí user login
POST   /auth/logout          ‚Üí logout current user
GET    /auth/me              ‚Üí get current user profile

USERS
----------------------------------------------------
GET    /users                ‚Üí list users
GET    /users/{id}           ‚Üí get single user
PUT    /users/{id}           ‚Üí update user

TEAMS
----------------------------------------------------
GET    /teams                ‚Üí list teams
POST   /teams                ‚Üí create new team
GET    /teams/{id}           ‚Üí show team
PUT    /teams/{id}           ‚Üí update team
DELETE /teams/{id}           ‚Üí delete team
POST   /teams/{id}/members   ‚Üí add member to team
DELETE /teams/{id}/members/{user_id} ‚Üí remove member

PROJECTS
----------------------------------------------------
GET    /projects             ‚Üí list all projects
POST   /projects             ‚Üí create project
GET    /projects/{id}        ‚Üí show project
PUT    /projects/{id}        ‚Üí update project
DELETE /projects/{id}        ‚Üí delete project

TASKS
----------------------------------------------------
GET    /projects/{project_id}/tasks       ‚Üí list tasks
POST   /projects/{project_id}/tasks       ‚Üí create task
GET    /tasks/{id}                        ‚Üí show task
PUT    /tasks/{id}                        ‚Üí update task
DELETE /tasks/{id}                        ‚Üí delete task
POST   /tasks/{id}/complete               ‚Üí mark task as complete

COMMENTS
----------------------------------------------------
GET    /tasks/{task_id}/comments          ‚Üí list comments
POST   /tasks/{task_id}/comments          ‚Üí add comment
DELETE /comments/{id}                     ‚Üí delete comment

ACTIVITY LOGS
----------------------------------------------------
GET    /activity                          ‚Üí list recent activities
GET    /activity/{id}                     ‚Üí show specific activity

----------------------------------------------------
5Ô∏è‚É£ DESIGN PATTERNS & CONVENTIONS
----------------------------------------------------
- Controllers ‚Üí delegate to Service classes.
- Services ‚Üí handle business rules and validation.
- Repositories ‚Üí encapsulate all database logic.
- Observers ‚Üí handle model lifecycle events (created, updated, deleted).
- Events / Listeners ‚Üí handle domain-level actions and notifications.
- Responses ‚Üí standardized via App\Http\Responses\ApiResponse.

----------------------------------------------------
6Ô∏è‚É£ DEVELOPER WORKFLOW
----------------------------------------------------
Lint & Format:
    composer run lint
    ‚Üí runs Rector and Pint for code cleanup

Static Analysis:
    composer run test
    ‚Üí clears config + runs PHPStan

Commit Checklist:
    1. composer list
    2. composer run lint
    3. composer run test
    4. run all feature tests before pushing

----------------------------------------------------
7Ô∏è‚É£ FUTURE EXTENSIONS
----------------------------------------------------
- Task attachments (files)
- Tagging system (tags, taggables)
- WebSocket notifications
- Activity feed UI (frontend integration)
- Role-based permissions (per team/project)

====================================================
END OF NOTES
====================================================
